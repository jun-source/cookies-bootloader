Regarding security features for FW images, we must distiguish among:
	- Secure FW update.
	- Secure boot everytime the device is turn off/on.
#########################################################################################################################################
	1.1. Test example bootloaders provided by the manufacturer
		- bootloader_rebootAndInstall can be found at GSDK libraries.
		- It seems like for bootloader-storage-internal example, the boot mode need to be configured through MACROS.
		- Bootloader projects examples follow a common structure. Analize the examples for Standalone and Application.
		- btl_interface_storage.h has an explanation of the bootloader function calling sequence.
		- For Application bootloader test SRAM reset boot.
		- btl_main seems to be the "main" function of the main bootloader.
		- It shouldn't be a difference between bootloaders based on the FW upgrade proccess (standalone and application).
		1.1.1. Upload provided bootloader examples (standalone or application?): compatible with FW upgrade applications.
		1.1.2. Analized if Post-Quantum algorithms can be included properly in the source code of the bootloader.
	1.2. Test FW upgrade examples
		1.2.1. Standalone (BGAPI UART DFU)
			- It seems to be a independent C binary run on the host that interacts with  the booloader through BGAPI commands.
		1.2.2. Application (MIGHT NOT BE EVEN NEEDED): it should be similar to BGAPI UART DFU example. The only difference is that the code
				is running on the target device.
#########################################################################################################################################
1. Document the work done till now and upload it to GitHub.
2. Play with secure boot by enabling different features.
3. With the experience acumulated try to propose a work directory and mechanism for FW upgrade (maybe only standalone) and secure boot.
4. Commit a valid final stock solution.
5. Customize bootloader and FW upgrade by adding:
	3.1. Post-Quantum cryptography.
	3.2. Token infrastructure. etc.
